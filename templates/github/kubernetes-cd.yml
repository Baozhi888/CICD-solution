name: Kubernetes CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DEPLOY_ENV: production

jobs:
  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/app-deployment
          kubectl get pods

  # 蓝绿部署
  blue-green-deploy:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy new version (green)
        run: |
          kubectl apply -f k8s/deployment-green.yaml
          kubectl apply -f k8s/service-green.yaml

      - name: Wait for green deployment to be ready
        run: |
          kubectl rollout status deployment/app-deployment-green

      - name: Switch traffic to green
        run: |
          kubectl patch service app-service -p '{"spec":{"selector":{"app":"app-green"}}}'

      - name: Verify traffic switch
        run: |
          sleep 30
          kubectl get pods

      - name: Clean up blue deployment
        run: |
          kubectl delete -f k8s/deployment-blue.yaml
          kubectl delete -f k8s/service-blue.yaml

  # 滚动更新
  rolling-update:
    name: Rolling Update
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Apply rolling update
        run: |
          kubectl apply -f k8s/deployment.yaml

      - name: Monitor rolling update
        run: |
          kubectl rollout status deployment/app-deployment

      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services

  # 金丝雀发布
  canary-deploy:
    name: Canary Deployment
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy canary version
        run: |
          kubectl apply -f k8s/deployment-canary.yaml

      - name: Wait for canary deployment to be ready
        run: |
          kubectl rollout status deployment/app-deployment-canary

      - name: Route 10% traffic to canary
        run: |
          kubectl patch service app-service -p '{"spec":{"selector":{"app":"app-deployment-canary","version":"canary"}}}'

      - name: Monitor canary
        run: |
          sleep 60
          kubectl get pods

      - name: Promote to full deployment
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl patch service app-service -p '{"spec":{"selector":{"app":"app-deployment"}}}'

      - name: Clean up canary deployment
        run: |
          kubectl delete -f k8s/deployment-canary.yaml

  # 回滚机制
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    environment: production
    if: failure()
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/app-deployment

      - name: Verify rollback
        run: |
          kubectl rollout status deployment/app-deployment
          kubectl get pods