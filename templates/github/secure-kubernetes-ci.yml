name: Kubernetes CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  KUBERNETES_VERSION: v1.24.0

jobs:
  # Kubernetes配置验证
  k8s-config-validation:
    name: Kubernetes Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/

  # Kubernetes配置安全扫描
  k8s-security-scan:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    needs: k8s-config-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run kube-score
        uses: zegl/kube-score@v1.10.1
        with:
          kubernetes-version: ${{ env.KUBERNETES_VERSION }}
          ignore-tests: "container-image-tag"
          file: k8s/*.yaml

      - name: Run kube-linter
        uses: stackrox/kube-linter-action@v1.0.0
        with:
          directory: k8s/

  # 容器镜像安全扫描
  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: k8s-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/myapp:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 依赖项漏洞扫描
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: container-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

  # Kubernetes配置语法检查
  k8s-syntax-check:
    name: Kubernetes Syntax Check
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Check YAML syntax
        run: |
          find k8s/ -name "*.yaml" -o -name "*.yml" | xargs -I {} kubectl apply --dry-run=client -f {}

  # Helm模板验证
  helm-template-validation:
    name: Helm Template Validation
    runs-on: ubuntu-latest
    needs: k8s-syntax-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Lint Helm charts
        run: |
          helm lint charts/

      - name: Template Helm charts
        run: |
          helm template charts/ --debug

  # Kubernetes集成测试
  k8s-integration-test:
    name: Kubernetes Integration Test
    runs-on: ubuntu-latest
    needs: helm-template-validation
    services:
      k3s:
        image: rancher/k3s:v1.24.0-k3s1
        privileged: true
        options: >-
          --tmpfs /run
          --tmpfs /var/run
          --privileged
        ports:
          - 6443:6443
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBERNETES_VERSION }}

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > ~/.kube/config

      - name: Deploy to test cluster
        run: |
          kubectl apply -f k8s/

      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services

      - name: Run integration tests
        run: |
          # 运行集成测试脚本
          echo "Running integration tests..."