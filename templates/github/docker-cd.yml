name: Docker CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DEPLOY_ENV: production

jobs:
  # 构建和推送Docker镜像
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # 部署到Kubernetes
  deploy-k8s:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/${{ github.event.repository.name }} ${{ github.event.repository.name }}=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ github.event.repository.name }}
          kubectl get pods

  # 蓝绿部署
  blue-green-deploy:
    name: Blue-Green Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy new version (green)
        run: |
          kubectl apply -f k8s/deployment-green.yaml
          kubectl apply -f k8s/service-green.yaml

      - name: Wait for green deployment to be ready
        run: |
          kubectl rollout status deployment/docker-app-green

      - name: Switch traffic to green
        run: |
          kubectl patch service docker-app-service -p '{"spec":{"selector":{"app":"docker-app-green"}}}'

      - name: Verify traffic switch
        run: |
          sleep 30
          kubectl get pods

      - name: Clean up blue deployment
        run: |
          kubectl delete -f k8s/deployment-blue.yaml
          kubectl delete -f k8s/service-blue.yaml

  # 滚动更新
  rolling-update:
    name: Rolling Update
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Apply rolling update
        run: |
          kubectl apply -f k8s/deployment.yaml

      - name: Monitor rolling update
        run: |
          kubectl rollout status deployment/docker-app

      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services

  # 金丝雀发布
  canary-deploy:
    name: Canary Deployment
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy canary version
        run: |
          kubectl apply -f k8s/deployment-canary.yaml

      - name: Wait for canary deployment to be ready
        run: |
          kubectl rollout status deployment/docker-app-canary

      - name: Route 10% traffic to canary
        run: |
          kubectl patch service docker-app-service -p '{"spec":{"selector":{"app":"docker-app-canary","version":"canary"}}}'

      - name: Monitor canary
        run: |
          sleep 60
          kubectl get pods

      - name: Promote to full deployment
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl patch service docker-app-service -p '{"spec":{"selector":{"app":"docker-app"}}}'

      - name: Clean up canary deployment
        run: |
          kubectl delete -f k8s/deployment-canary.yaml

  # 回滚机制
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    environment: production
    if: failure()
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Rollback to previous version
        run: |
          kubectl rollout undo deployment/docker-app

      - name: Verify rollback
        run: |
          kubectl rollout status deployment/docker-app
          kubectl get pods